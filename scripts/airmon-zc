#!/bin/sh
DEBUG="0"
USERID=""
IFACE=""
CH=$3; [ x$3 = "x" ] && CH=10
MADWIFI=0
MAC80211=0
IW_SOURCE="http://wireless.kernel.org/download/iw/iw-latest.tar.bz2"
IW_ERROR=""
UDEV_ISSUE=0
SYSFS=0
if [ -d /sys/ ]
then
	SYSFS=1
fi

#TODO LIST

#cleanup getDriver()
#add band detection
#change names to mimic hostapd or kismet


if [ x"$(command -v id 2> /dev/null)" != "x" ]
then
	USERID="$(id -u 2> /dev/null)"
fi

if [ x$USERID = "x" -a x$UID != "x" ]
then
	USERID=$UID
fi

if [ x$USERID != "x" -a x$USERID != "x0" ]
then
	printf "Run it as root\n" ; exit ;
fi

#check for all needed binaries
if [ ! -x "$(command -v iw 2>&1)" ]
then
	printf "You don't have iw installed, please install it from your distro's package manager.\n"
	printf "If your distro doesn't have a recent version you can download it from this link:\n"
	printf "${IW_SOURCE}\n"
	exit
fi

if [ ! -x "$(command -v ethtool 2>&1)" ]
then
	printf "Please install the ethtool package for your distro.\n"
	exit
fi

if [ ! -x "$(command -v lsusb 2>&1)" ]
then
	printf "Please install lsusb from your distro's package manager.\n"
	exit
fi

if [ ! -x "$(command -v lspci 2>&1)" ]
then
	printf "Please install lspci from your distro's package manager.\n"
	exit
fi

if [ ! -x "$(command -v modprobe 2>&1)" ]
then
	printf "How in the world do you not have modprobe installed?\n"
	printf "Please select a linux distro which has at least basic functionality (or install modprobe).\n"
	exit
fi

if [ ! -x "$(command -v modinfo 2>&1)" ]
then
	printf "How in the world do you not have modinfo installed?\n"
	printf "Please select a linux distro which has at least basic functionality (or install modinfo).\n"
	exit
fi

if [ ! -x "$(command -v awk 2>&1)" ]
then
	printf "How in the world do you not have awk installed?\n"
	printf "Please select a linux distro which has at least basic functionality (or install awk).\n"
	exit
fi

if [ ! -x "$(command -v grep 2>&1)" ]
then
	printf "How in the world do you not have grep installed?\n"
	printf "Please select a linux distro which has at least basic functionality (or install grep).\n"
	exit
fi
#done checking for binaries

if [ "x$MON_PREFIX" = "x" ]
then
	MON_PREFIX="mon"
fi

PROCESSES="wpa_action\|wpa_supplicant\|wpa_cli\|dhclient\|ifplugd\|dhcdbd\|dhcpcd\|NetworkManager\|knetworkmanager\|avahi-autoipd\|avahi-daemon\|wlassistant\|wifibox"
PS_ERROR="invalid"

usage() {
	printf "usage: $(basename $0) <start|stop|check> <interface> [channel or frequency]\n\n"
	exit
}

startDeprecatedIface() {
	iwconfig $1 mode monitor > /dev/null 2>&1
	if [ ! -z $2 ]
	then
		if [ $2 -lt 1000 ]
		then
			iwconfig $1 channel $2 > /dev/null 2>&1
		else
			iwconfig $1 freq "$2"000000 > /dev/null 2>&1
		fi
	else
		iwconfig $1 channel ${CH} > /dev/null 2>&1
	fi
	iwconfig $1 key off > /dev/null 2>&1
	ifconfig $1 up
	printf " (monitor mode enabled)"
}

startMac80211Iface() {
	#check if $1 already has a mon interface on the same phy and bail if it does
	if [ -d /sys/class/ieee80211/${PHYDEV}/device/net ]
	then
		for i in $(ls /sys/class/ieee80211/${PHYDEV}/device/net/)
		do
			if [ "$(cat /sys/class/ieee80211/${PHYDEV}/device/net/${i}/type)" = "803" ]
			then
				printf "\n\t\t(mac80211 monitor mode already enabled for [${PHYDEV}]${1} on [${PHYDEV}]${i})\n"
				exit
			fi
		done
	fi
	#we didn't bail means we need a monitor interface
	IW_ERROR=$(iw dev $1 interface add $MONDEV type monitor 2>&1 | grep "nl80211 not found")
	if [ x$IW_ERROR = "x" ]
	then
		sleep 2s
		if [ ! -z $3 ]
		then
			if [ $3 -lt 1000 ]
			then
				iw dev $MONDEV set channel $3
			else
				iw dev $MONDEV set freq "$3"
			fi
		else
			iw dev ${MONDEV} set channel ${CH}
		fi
		ifconfig $MONDEV up
		printf "\n\t\t(mac80211 monitor mode enabled for [${PHYDEV}]${1} on [${PHYDEV}]$MONDEV)\n"
	else
		printf "\n\nERROR: something went wrong with iw."
	fi
}

stopMac80211Iface() {
	if [ -f /sys/class/net/$1/type ]
	then
		if [ "$(cat /sys/class/net/$1/type)" != "803" ]
		then
			printf "\n\nYou are trying to stop a device that isn't in monitor mode.\n"
			printf "Doing so is a terrible idea, if you really want to do it then you\n"
			printf "need to type 'iw $1 del' yourself since it is a terrible idea.\n"
			printf "Most likely you want to remove an interface called mon[0-9]\n"
			printf "If you feel you have reached this warning in error,\n"
			printf "please report it following the directions above."
		else
			IW_ERROR=$(iw dev "$1" del 2>&1 | grep "nl80211 not found")
			if [ x$IW_ERROR = "x" ]
			then
				printf " (mac80211 vif removed)"
			else
				if [ -f /sys/class/ieee80211/"$PHYDEV"/remove_iface ]
				then
					printf "$1" > /sys/class/ieee80211/"$PHYDEV"/remove_iface
					printf " (mac80211 vif removed)"
				else
					printf "\n\nERROR: Neither the sysfs interface links nor the iw command is available.\nPlease download and install iw from\n$IW_SOURCE\n"
				fi
			fi
		fi
	fi
}

stopDeprecatedIface() {
	ifconfig $1 down > /dev/null 2>&1
	iwconfig $1 mode Managed > /dev/null 2>&1
	ifconfig $1 down > /dev/null 2>&1
	printf " (monitor mode disabled)"
}

getDriver() {
	#standard detection path, this is all that is needed for proper drivers
	DRIVER=$(printf "$ethtool_output" | awk '/driver/ {print $2}')

	if $(modinfo -n ${DRIVER} > /dev/null 2>&1)
	then
		true
	else
		unset DRIVER
	fi

	if [ "$DRIVER" = "" ]
	then
		if [ -f /sys/class/net/$1/device/uevent ]
		then
			DRIVER="$(awk -F'=' '$1 == "DRIVER" {print $2}' /sys/class/net/$1/device/uevent)"
		else
			#DRIVER we put SOMETHING in DRIVER here if we are unable to find anything real
			DRIVER="??????"
		fi
	fi

	#here we test for driver usb, ath9k_htc,rt2870, possibly others show this
	if [ "$DRIVER" = "usb" ]
	then
		BUSADDR="$(printf "$ethtool_output" | awk '/bus-info/ {print $2}'):1.0"
		if [ "$BUSADDR" != "" ]
		then
			if [ -f /sys/class/net/$1/device/$BUSADDR/uevent ]
			then
				DRIVER="$(awk -F'=' '$1 == "DRIVER" {print $2}' /sys/class/net/$1/device/$BUSADDR/uevent)"
			fi
		fi

		#here we can normalize driver names we don't like
		if [ "$DRIVER" = "rt2870" ]
		then
			DRIVER="rt2870sta"
		fi
		if [ -f /sys/class/net/$1/device/idProduct ]
		then
			if [ $(cat /sys/class/net/$1/device/idProduct) = "3070" ]
			then
				DRIVER="rt3070sta"
			fi
		fi
	fi
	if [ "$DRIVER" = "rtl8187L" ]
	then
		DRIVER="r8187l"
	fi
	if [ "$DRIVER" = "rtl8187" ] && [ "$STACK" = "ieee80211" ]
	then
		DRIVER="r8187"
	fi

	#Here we will catch the broken lying drivers not caught above
	#currently this only functions for pci devices and not usb since lsusb has no -k option
	if $(modinfo -n $DRIVER  > /dev/null 2>&1)
	then
		true
	else
		DRIVER="$(lspci -d $DEVICEID -k | awk '/modules/ {print $3}')"
		if [ "$DRIVER" = "" ]
		then
			DRIVER="??????"
		fi
	fi
	if [ "$DEBUG" = "1" ]
	then
		printf "getdriver() $DRIVER\n"
	fi
}

getFrom() {
	#from detection
	if [ $(modinfo -n $DRIVER | grep 'kernel/drivers') ]
	then
		FROM="K"
		#we add special handling here because we hate the vendor drivers AND they install in the wrong place
		if [ "$DRIVER" = "r8187" ]
		then
			FROM="V"
		elif [ "$DRIVER" = "r8187l" ]
		then
			FROM="V"
		elif [ "$DRIVER" = "rt5390sta" ]
		then
			FROM="V"
		fi
	elif [ $(modinfo -n $DRIVER | grep 'updates/drivers') ]
	then
		FROM="C"
	elif [ $(modinfo -n $DRIVER | grep misc) ]
	then
		FROM="M"
		#add a yell at the user in here
	else
		FROM="?"
	fi

	#check for staging drivers seperately
	if [ $(modinfo -n $DRIVER | grep staging) ]
	then
		FROM="S"
        fi

	if [ "$DEBUG" = "1" ]
	then
		printf "getFrom() $FROM\n"
	fi
}

getFirmware() {
	FIRMWARE=$(printf "$ethtool_output" | awk '/firmware-version/ {print $2}')
	#ath9k_htc firmware is a shorter version number than most so trap and make it pretty
	if [ "$DRIVER" = "ath9k_htc" ]
	then
		FIRMWARE="$FIRMWARE\t"
	fi

	if [ "$FIRMWARE" = "N/A" ]
	then
		FIRMWARE="$FIRMWARE\t"
	elif [ -z "$FIRMWARE" ]
	then
		FIRMWARE="unavailable"
	fi

	if [ "$DEBUG" = "1" ]
	then
		printf "getFirmware $FIRMWARE\n"
	fi

}

getChipset() {
	#this needs cleanup, we shouldn't have multiple lines assigning chipset per bus
	#fix this to be one line per bus
	if [ -f /sys/class/net/$1/device/modalias ]
	then
		BUS=$(cat /sys/class/net/$1/device/modalias | cut -d ":" -f 1)
		if [ "$BUS" = "usb" ]
		then
			BUSINFO=$(cat /sys/class/net/$1/device/modalias | cut -d ":" -f 2 | cut -b 1-10 | sed 's/^.//;s/p/:/')
			CHIPSET=$(lsusb | grep -i "$BUSINFO" | head -n1 - | cut -f3- -d ":" | sed 's/^....//;s/ Network Connection//g;s/ Wireless Adapter//g;s/^ //')
		elif [ "$BUS" = "pci" ]
		then
			if [ -f /sys/class/net/$1/device/vendor -a -f /sys/class/net/$1/device/device ]
			then
				DEVICEID=$(cat /sys/class/net/$1/device/vendor):$(cat /sys/class/net/$1/device/device)
				CHIPSET=$(lspci -d $DEVICEID | cut -f3- -d ":" | sed 's/Wireless LAN Controller //g;s/ Network Connection//g;s/ Wireless Adapter//;s/^ //')
			else
				BUSINFO=$(printf "$ethtool_output" | grep bus-info | cut -d ":" -f "3-" | sed 's/^ //')
				CHIPSET=$(lspci | grep "$BUSINFO" | head -n1 - | cut -f3- -d ":" | sed 's/Wireless LAN Controller //g;s/ Network Connection//g;s/ Wireless Adapter//;s/^ //')
				DEVICEID=$(lspci -nn | grep "$BUSINFO" | grep '[[0-9][0-9][0-9][0-9]:[0-9][0-9][0-9][0-9]' -o)
			fi
		else
			CHIPSET="Not pci or usb"
		fi
	#we don't do a check for usb here but it is obviously only going to work for usb
	elif [ -f /sys/class/net/$1/device/idVendor -a -f /sys/class/net/$1/device/idProduct ]
	then
		DEVICEID=$(cat /sys/class/net/$1/device/idVendor):$(cat /sys/class/net/$1/device/idProduct)
		CHIPSET=$(lsusb | grep -i "$DEVICEID" | head -n1 - | cut -f3- -d ":" | sed 's/^....//;s/ Network Connection//g;s/ Wireless Adapter//g;s/^ //')
	else
		CHIPSET="non-mac80211 device? (report this!)"
		#this seems to somehow trigger on b43's 4318 chip.... but it really shouldn't.
	fi

	if [ "$DEBUG" = "1" ]
	then
		printf "getchipset() $CHIPSET\n"
		printf "BUS = $BUS\n"
		printf "BUSINFO = $BUSINFO\n"
		printf "DEVICEID = $DEVICEID\n"
	fi
}

getStack() {
	if [ x"$1" = "x" ]
	then
		return
	fi

	if [ -d /sys/class/net/$1/phy80211/ ]
	then
		MAC80211=1
		STACK="mac80211"
	else
		MAC80211=0
		STACK="ieee80211"
	fi

	if [ -e /proc/sys/dev/$1/fftxqmin ]
	then
		MAC80211=0
		STACK="net80211"
	fi

	if [ "$DEBUG" = "1" ]
	then
		printf "getStack $STACK\n"
	fi

}

getExtendedInfo() {
	if [ "$DRIVER" = "??????" ]
	then
		EXTENDED="\t Failure detecting driver properly please report"
	fi

	#first we set all the real (useful) info we can find
	if [ -f /sys/class/net/$1/device/product ]
	then
		EXTENDED="\t$(cat /sys/class/net/$1/device/product)"
	fi

	#then we sweep for known broken drivers with no available better drivers
	if [ "$DRIVER" = "brcmsmac" ]
	then
		EXTENDED="Driver commonly referred to as brcm80211 (no injection yet)"
	fi
	if [ "$DRIVER" = "r8712u" ]
	then
		EXTENDED="\t\t\t\tNo monitor or injection support\n"
	fi

	#lastly we detect all the broken drivers which have working alturnatives
	KV=$(uname -r | awk -F'-' '{print $1}')
	KVMAJOR=$(printf ${KV} | awk -F'.' '{print $1$2}')
	KVMINOR=$(printf ${KV} | awk -F'.' '{print $3}')

	if [ $KVMAJOR -lt 26 ]
	then
		printf "You are running a kernel older than 2.6, I'm surprised it didn't error before now."
	        if [ "$DEBUG" = "1" ]
	        then
			printf ${KVMAJOR} ${KVMINOR}
		fi
		exit
	fi

	if [ "$DRIVER" = "rt2870sta" ]
	then
		if [ "$KVMAJOR" = "26" ] && [ "$KVMINOR" -ge "35" ]
		then
			EXTENDED="\tBlacklist rt2870sta and use rt2800usb"
		else
			EXTENDED="\tUpgrade to kernel 2.6.35 or install compat-wireless stable"
		fi
		#add in a flag for "did you tell use to do X" and emit instructions
	elif [ "$DRIVER" = "rt3070sta" ]
	then
		if [ "$KVMAJOR" = "26" ] && [ "$KVMINOR" -ge "35" ]
		then
			EXTENDED="\tBlacklist rt3070sta and use rt2800usb"
		else
			EXTENDED="\tUpgrade to kernel 2.6.35 or install compat-wireless stable"
		fi
	elif [ "$DRIVER" = "rt5390sta" ]
	then
		if [ "$KVMAJOR" = "26" ] && [ "$KVMINOR" -ge "39" ]
		then
			EXTENDED="\tBlacklist rt5390sta and use rt2800usb"
		else
			EXTENDED="\tUpgrade to kernel 2.6.39 or install compat-wireless stable"
		fi
	elif [ "$DRIVER" = "ar9170usb" ]
	then
		if [ "$KVMAJOR" = "26" ] && [ "$KVMINOR" -ge "37" ]
		then
			EXTENDED="\tBlacklist ar9170usb and use carl9170"
		else
			EXTENDED="\tUpgrade to kernel 2.6.37 or install compat-wireless stable"
		fi
	elif [ "$DRIVER" = "arusb_lnx" ]
	then
		if [ "$KVMAJOR" = "26" ] && [ "$KVMINOR" -ge "37" ]
		then
			EXTENDED="\tBlacklist arusb_lnx and use carl9170"
		else
			EXTENDED="\tUpgrade to kernel 2.6.37 or install compat-wireless stable"
		fi
	elif [ "$DRIVER" = "r8187" ]
	then
		if [ "$KVMAJOR" = "26" ] && [ "$KVMINOR" -ge "29" ]
		then
			EXTENDED="\t\tBlacklist r8187 and use rtl8187 from the kernel"
		else
			EXTENDED="\t\tUpgrade to kernel 2.6.29 or install compat-wireless stable"
		fi
	elif [ "$DRIVER" = "r8187l" ]
	then
		if [ "$KVMAJOR" = "26" ] && [ "$KVMINOR" -ge "29" ]
		then
			EXTENDED="\t\tBlacklist r8187l and use rtl8187 from the kernel"
		else
			EXTENDED="\t\tUpgrade to kernel 2.6.29 or install compat-wireless stable"
		fi
	fi
}

scanProcesses() {
	if [ -f "$(command -v service 2>&1)" ] && [ x"$1" = "xkill" ]
	then
		service network-manager stop 2> /dev/null > /dev/null
		service avahi-daemon stop 2> /dev/null > /dev/null
	fi

	match=$(ps -A -o comm= | grep $PROCESSES | grep -v grep | wc -l)
	if [ $match -gt 0 -a x"$1" != "xkill" ]
	then
		printf "\nFound $match processes that could cause trouble.\n"
		printf "If airodump-ng, aireplay-ng or airtun-ng stops working after\n"
		printf "a short period of time, you may want to kill (some of) them!\n"
		printf "\nPID\tName\n"
	else
		if [ x"$1" != "xkill" ]
		then
			return
		fi
	fi

	if [ $match -gt 0 -a x"$1" = "xkill" ]
	then
		printf "Killing all those processes..."
	fi

	i=1
	while [ $i -le $match ]
	do
		pid=$(ps -A -o pid= -o comm= | grep $PROCESSES | grep -v grep | head -n $i | tail -n 1 | awk '{print $1}')
		pname=$(ps -A -o pid= -o comm= | grep $PROCESSES | grep -v grep | head -n $i | tail -n 1 | awk '{print $2}')
		if [ x"$1" != "xkill" ]
		then
			printf "$pid\t$pname\n"
		else
			kill $pid
		fi
		i=$(($i+1))
	done
}

checkProcessesIface() {
	if [ x"$1" = "x" ]
	then
		return
	fi

	match2=$(ps -o comm= -p 1 2>&1 | grep $PS_ERROR | grep -v grep | wc -l)
	if [ $match2 -gt 0 ]
	then
		return
	fi

	for i in $(ps auxw | grep $1 | grep -v "grep" | grep -v "airmon-zc" | awk '{print $2}')
	do
		pname=$(ps -o comm= -p $i)
		printf "Process with PID $i ($pname) is running on interface $1\n"
	done
}

getPhy() {
	if [ x"$1" = "x" ]
	then
		return
	fi

	if [ $MAC80211 = "0" ]
	then
		PHYDEV="null"
		return
	fi

	if [ -d /sys/class/net/$1/phy80211/ ]
	then
		PHYDEV="$(ls -l "/sys/class/net/$1/phy80211" | sed 's/^.*\/\([a-zA-Z0-9_-]*\)$/\1/')"
	fi
}

getNewMon() {
	#XXX rewrite this crap to work like kismet or hostapd
	i=0

	while [ -d /sys/class/net/$MON_PREFIX$i/ ]
	do
		i=$(($i+1))
	done

	MONDEV="$MON_PREFIX$i"
}

checkvm() {
	#this entire section of code is completely stolen from Carlos Perez's work in checkvm.rb for metasploit and rewritten (poorly) in sh
	#Check dmi info
	if [ -x "$(command -v dmidecode 2>&1)" ]
	then
		dmi_info=$(dmidecode)
		if [ dmi_info ]
		then
			echo ${dmi_info} | grep -iq "microsoft corporation" 2> /dev/null && vm="MS Hyper-V"
			echo ${dmi_info} | grep -iq "vmware" 2> /dev/null && vm="VMware"
			echo ${dmi_info} | grep -iq "virtualbox" 2> /dev/null && vm="VirtualBox"
			echo ${dmi_info} | grep -iq "qemu" 2> /dev/null && vm="Qemu/KVM"
			echo ${dmi_info} | grep -iq "domu" 2> /dev/null && vm="Xen"
			vm_from="dmi_info"
		fi
	fi

	#check loaded modules
	if [ -z ${vm} ]
	then
		if [ -x "$(command -v lsmod 2>&1)" ]
		then
			lsmod_data=$(lsmod)
			if [ lsmod ]
			then
				echo ${lsmod_data} | grep -iqE "vboxsf|vboxguest" 2> /dev/null && vm="VirtualBox"
				echo ${lsmod_data} | grep -iqE "vmw_ballon|vmxnet|vmw" 2> /dev/null && vm="VMware"
				echo ${lsmod_data} | grep -iqE "xen-vbd|xen-vnif" 2> /dev/null && vm="Xen"
				echo ${lsmod_data} | grep -iqE "virtio_pci|virtio_net" 2> /dev/null && vm="Qemu/KVM"
				echo ${lsmod_data} | grep -iqE "hv_vmbus|hv_blkvsc|hv_netvsc|hv_utils|hv_storvsc" && vm="MS Hyper-V"
				vm_from="lsmod"
			fi
		fi
	fi

	#check scsi driver
	if [ -z ${vm} ]
	then
		if [ -f /proc/scsi/scsi ]
		then
			grep -iq "vmware" /proc/scsi/scsi 2> /dev/null && vm="VMware"
			grep -iq "vbox" /proc/scsi/scsi 2> /dev/null && vm="VirtualBox"
			vm_from="/pro/scsi/scsi"
		fi
	fi

	# Check IDE Devices
	if [ -z ${vm} ]
	then
		if [ -d /proc/ide ]
		then
			ide_model=$(cat /proc/ide/hd*/model)
			echo ${ide_model} | grep -iq "vbox" 2> /dev/null && vm="VirtualBox"
			echo ${ide_model} | grep -iq "vmware" 2> /dev/null && vm="VMware"
			echo ${ide_model} | grep -iq "qemu" 2> /dev/null && vm="Qemu/KVM"
			echo ${ide_model} | grep -iqE "virtual (hd|cd)" 2> /dev/null && vm="Hyper-V/Virtual PC"
			vm_from="ide_model"
		fi
	fi

	# Check using lspci
	if [ -z ${vm} ]
	then
			lspci_data=$(lspci)
			echo ${lspci_data} | grep -iq "vmware" 2> /dev/null && vm="VMware"
			echo ${lspci_data} | grep -iq "virtualbox" 2> /dev/null && vm="VirtualBox"
			vm_from="lspci"
	fi

	# Xen bus check
	## XXX: Removing unsafe check
	# this check triggers if CONFIG_XEN_PRIVILEGED_GUEST=y et al are set in kconfig (debian default) even in not actually a guest
	#if [ -z ${vm} ]
	#then
	#	ls -1 /sys/bus | grep -iq "xen" 2> /dev/null && vm="Xen"
	#	vm_from="/sys/bus/xen"
	#fi

	# Check using lscpu
	if [ !${vm} ]
	then
		if [ -x "$(command -v lscpu 2>&1)" ]
                then
                        lscpu_data=$(lscpu)
			echo ${lscpu_data} | grep -iq "Xen" 2> /dev/null && vm="Xen"
			echo ${lscpu_data} | grep -iq "KVM" 2> /dev/null && vm="KVM"
			echo ${lscpu_data} | grep -iq "Microsoft" 2> /dev/null && vm="MS Hyper-V"
			vm_from="lscpu"
		fi
	fi

	#Check vmnet
	if [ -z ${vm} ]
	then
		if [ -e /dev/vmnet ]
		then
			vm="VMware"
			vm_from="/dev/vmnet"
		fi
	fi

	# Check dmesg Output
	if [ -z ${vm} ]
	then
		if [ -x "$(command -v dmesg 2>&1)" ]
                then
			dmesg_output=$(dmesg)
			echo ${dmesg_output} | grep -iqE "vboxbios|vboxcput|vboxfacp|vboxxsdt|(vbox cd-rom)|(vbox harddisk)" && vm="VirtualBox"
			echo ${dmesg_output} | grep -iqE "(vmware virtual ide)|(vmware pvscsi)|(vmware virtual platform)" && vm="VMware"
			echo ${dmesg_output} | grep -iqE "(xen_mem)|(xen-vbd)" && vm="Xen"
			echo ${dmesg_output} | grep -iqE "(qemu virtual cpu version)" && vm="Qemu/KVM"
			vm_from="dmesg"
		fi
	fi
}

#other startup checks

if [ x"$1" = "xcheck" ] || [ x"$1" = "xstart" ]
then
	scanProcesses
	for iface in $(ls -1 /sys/class/net)
	do
		if [ -f /sys/class/net/${iface}/uevent ]; then
			if $(grep -q DEVTYPE=wlan /sys/class/net/${iface}/uevent)
			then
				iface_list="${iface_list}\n ${iface}"
			fi
		fi
	done
	if [ -x "$(command -v iwconfig 2>&1)" ] && [ -x "$(command -v sort 2>&1)" ]
	then
		for iface in $(iwconfig 2> /dev/null | sed 's/^\([a-zA-Z0-9_]*\) .*/\1/')
		do
			iface_list="${iface_list}\n ${iface}"
		done
	fi
	for iface in $(printf "${iface_list}" | sort -bu)
	do
		checkProcessesIface ${iface}
	done

	if [ x"$2" = "xkill" ]
	then
		scanProcesses "$2"
	fi
	if [ x"$1" = "xcheck" ]
	then
		exit
	fi
fi

if [ $# -ne "0" ]
then
	if [ x$1 != "xstart" ] && [ x$1 != "xstop" ]
	then
		usage
	fi

	if [ x$2 = "x" ]
	then
		usage
	fi
fi

#startup checks complete, headers then main
printf "\nThis script is intended to replace airmon-ng in 1.3 and is functionally based on it.\n"
printf "Please test and report bugs to Zero_Chaos on freenode in #aircrack-ng or on trac\n\n"

uname -a

checkvm
if [ ${vm} ]
then
	printf "Detected VM using ${vm_from}\n"
	printf "This appears to be a ${vm} Virtual Machine\n"
	printf "If your system supports VT-d, it may be possible to use PCI devices\n"
	printf "If your system does not support VT-d, you can only use USB wifi cards\n"
fi

printf "\nK indicates driver is from $(uname -r)\n"
if $(modinfo compat > /dev/null 2>&1)
then
	modprobe compat
fi
if [ -f /sys/module/compat/parameters/compat_version ]
then
	printf "C indicates driver is from $(cat /sys/module/compat/parameters/compat_version)\n"
fi
printf "V indicates driver comes directly from the vendor, almost certainly a bad thing\n"
printf "S indicates driver comes from the staging tree, these drivers are meant for reference not actual use, BEWARE\n"
printf "? indicates we do not know where the driver comes from... report this\n"
printf "\n\nX[PHY]Interface\tDriver[Stack]-FirmwareRev\tChipset\t\t\t\t\t\t\tExtended Info\n\n"

for iface in $(ifconfig -a 2> /dev/null | egrep UNSPEC | sed 's/^\([a-zA-Z0-9_]*\) .*/\1/')
do

	if [ -e "/proc/sys/dev/$iface/fftxqmin" ]
	then
		MADWIFI=1
		ifconfig $iface up
		printf "$iface\t\tAtheros\t\tmadwifi-ng"
		if [ x$1 = "xstart" ] && [ x$2 = x$iface ]
		then
			IFACE=$(wlanconfig ath create wlandev $iface wlanmode monitor -bssid | grep ath)
			ifconfig $iface up 2> /dev/null > /dev/null
			if [ $CH -lt 1000 ]
			then
				iwconfig $IFACE channel $CH 2> /dev/null > /dev/null
			else
				iwconfig $IFACE freq "$CH"000000 2> /dev/null > /dev/null
			fi
		ifconfig $IFACE up 2> /dev/null > /dev/null
		UDEV_ISSUE=$?
		fi

		if [ x$1 = "xstop" ] && [ x$2 = x$iface ]
		then
			printf "$iface does not support 'stop', do it on ath interface\n"
		fi

		#why, dear god why is there a random newline here?
		printf "\n"
		continue
	fi
done

	if [ $MADWIFI -eq 1 ]
	then
		sleep 1s
	fi

for iface in $(ls -1 /sys/class/net)
do
	if [ -f /sys/class/net/${iface}/uevent ]; then
		if $(grep -q DEVTYPE=wlan /sys/class/net/${iface}/uevent)
		then
			iface_list="${iface_list}\n ${iface}"
		fi
	fi
done
if [ -x "$(command -v iwconfig 2>&1)" ] && [ -x "$(command -v sort 2>&1)" ]
then
	for iface in $(iwconfig 2> /dev/null | sed 's/^\([a-zA-Z0-9_]*\) .*/\1/')
	do
		iface_list="${iface_list}\n ${iface}"
	done
fi
for iface in $(printf "${iface_list}" | sort -bu)
do
	unset ethtool_output DRIVER FROM FIRMWARE STACK MADWIFI MAC80211 BUS BUSADDR BUSINFO DEVICEID CHIPSET EXTENDED PHYDEV 
	#add a RUNNING check here and up the device if it isn't already
	ethtool_output="$(ethtool -i $iface 2>&1)"
	if [ "$ethtool_output" != "Cannot get driver information: Operation not supported" ]
	then
		getStack  $iface
		getChipset $iface
		getDriver   $iface
		getFrom $iface
		getFirmware $iface
		getPhy     $iface
		getExtendedInfo $iface
	else
 		printf "\nethtool failed, fallback to old method...\n"
		printf "Only mac80211 devices on kernel 2.6.33 or higher are officially supported by airmon-zc.\n"
		printf "Running airmon-ng:"
		airmon-ng $@
		exit
	fi

	#yes this really is the main output loop
	printf "${FROM}[${PHYDEV}]${iface}\t${DRIVER}[${STACK}]-${FIRMWARE}\t${CHIPSET}\t${EXTENDED}"

	if [ x$MAC80211 = "x1" ]
	then
		getNewMon
		if [ x$1 = "xstart" ] && [ x$2 = x$iface ]
		then
			startMac80211Iface $iface
		fi

		if [ x$1 = "xstop" ] && [ x$2 = x$iface ]
		then
			stopMac80211Iface $iface
		fi

		#why, dear god why is there a random newline here?
		printf "\n"
		continue
	fi
done

#why, dear god why is there a random newline here?
printf "\n"

if [ $UDEV_ISSUE != 0 ]
then
	printf "udev renamed the interface. Read the following for a solution:\n"
	printf "http://www.aircrack-ng.org/doku.php?id=airmon-ng#interface_athx_number_rising_ath0_ath1_ath2...._ath45\n\n"
fi
